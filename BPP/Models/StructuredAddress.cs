/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace bpp.Models
{ 
    /// <summary>
    /// Describes a structured address. This contains each component of a postal address as a single field. If supported, the network policy should specify which of these fields are required to be set. The network policy should also specify in what order these fields are to be presented on a user interface.
    /// </summary>
    [DataContract]
    public partial class StructuredAddress : IEquatable<StructuredAddress>
    { 
        /// <summary>
        /// Door / Shop number of the address
        /// </summary>
        /// <value>Door / Shop number of the address</value>

        [DataMember(Name="door")]
        public string Door { get; set; }

        /// <summary>
        /// Name of address if applicable. Example, shop name
        /// </summary>
        /// <value>Name of address if applicable. Example, shop name</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of the building or block
        /// </summary>
        /// <value>Name of the building or block</value>

        [DataMember(Name="building")]
        public string Building { get; set; }

        /// <summary>
        /// Street name or number
        /// </summary>
        /// <value>Street name or number</value>

        [DataMember(Name="street")]
        public string Street { get; set; }

        /// <summary>
        /// Name of the locality, apartments
        /// </summary>
        /// <value>Name of the locality, apartments</value>

        [DataMember(Name="locality")]
        public string Locality { get; set; }

        /// <summary>
        /// Name of the district this address is in
        /// </summary>
        /// <value>Name of the district this address is in</value>

        [DataMember(Name="district")]
        public string District { get; set; }

        /// <summary>
        /// Name or number of the ward if applicable
        /// </summary>
        /// <value>Name or number of the ward if applicable</value>

        [DataMember(Name="ward")]
        public string Ward { get; set; }

        /// <summary>
        /// City name
        /// </summary>
        /// <value>City name</value>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// State name
        /// </summary>
        /// <value>State name</value>

        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Country name
        /// </summary>
        /// <value>Country name</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Area code. This can be Pincode, ZIP code or any equivalent
        /// </summary>
        /// <value>Area code. This can be Pincode, ZIP code or any equivalent</value>

        [DataMember(Name="area_code")]
        public string AreaCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructuredAddress {\n");
            sb.Append("  Door: ").Append(Door).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Ward: ").Append(Ward).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AreaCode: ").Append(AreaCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StructuredAddress)obj);
        }

        /// <summary>
        /// Returns true if StructuredAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of StructuredAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredAddress other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Door == other.Door ||
                    Door != null &&
                    Door.Equals(other.Door)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Building == other.Building ||
                    Building != null &&
                    Building.Equals(other.Building)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    Locality == other.Locality ||
                    Locality != null &&
                    Locality.Equals(other.Locality)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    Ward == other.Ward ||
                    Ward != null &&
                    Ward.Equals(other.Ward)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    AreaCode == other.AreaCode ||
                    AreaCode != null &&
                    AreaCode.Equals(other.AreaCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Door != null)
                    hashCode = hashCode * 59 + Door.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Building != null)
                    hashCode = hashCode * 59 + Building.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (Locality != null)
                    hashCode = hashCode * 59 + Locality.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (Ward != null)
                    hashCode = hashCode * 59 + Ward.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (AreaCode != null)
                    hashCode = hashCode * 59 + AreaCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StructuredAddress left, StructuredAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StructuredAddress left, StructuredAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
