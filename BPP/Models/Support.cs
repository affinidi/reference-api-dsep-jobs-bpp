///*
// *  
// *
// *  
// *
// * OpenAPI spec version: 1.0.0-dsep-draft
// * 
// * Generated by: https://github.com/swagger-api/swagger-codegen.git
// */
//using System;
//using System.Linq;
//using System.IO;
//using System.Text;
//using System.Collections;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.ComponentModel.DataAnnotations;
//using System.Runtime.Serialization;
//using Newtonsoft.Json;

//namespace bpp.Models
//{ 
//    /// <summary>
//    /// Customer support
//    /// </summary>
//    [DataContract]
//    public partial class Support : IEquatable<Support>
//    { 
//        /// <summary>
//        /// Gets or Sets Type
//        /// </summary>
//        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
//        public enum TypeEnum
//        {
//            /// <summary>
//            /// Enum OrderEnum for order
//            /// </summary>
//            [EnumMember(Value = "order")]
//            OrderEnum = 0,
//            /// <summary>
//            /// Enum BillingEnum for billing
//            /// </summary>
//            [EnumMember(Value = "billing")]
//            BillingEnum = 1,
//            /// <summary>
//            /// Enum FulfillmentEnum for fulfillment
//            /// </summary>
//            [EnumMember(Value = "fulfillment")]
//            FulfillmentEnum = 2        }

//        /// <summary>
//        /// Gets or Sets Type
//        /// </summary>

//        [DataMember(Name="type")]
//        public TypeEnum? Type { get; set; }

//        /// <summary>
//        /// Gets or Sets RefId
//        /// </summary>

//        [DataMember(Name="ref_id")]
//        public string RefId { get; set; }

//        /// <summary>
//        /// Gets or Sets Tags
//        /// </summary>

//        [DataMember(Name = "tags")]
//        public List<TagGroup> Tags { get; set; }

//        /// <summary>
//        /// Returns the string presentation of the object
//        /// </summary>
//        /// <returns>String presentation of the object</returns>
//        public override string ToString()
//        {
//            var sb = new StringBuilder();
//            sb.Append("class Support {\n");
//            sb.Append("  Type: ").Append(Type).Append("\n");
//            sb.Append("  RefId: ").Append(RefId).Append("\n");
//            sb.Append("  Channels: ").Append(Channels).Append("\n");
//            sb.Append("}\n");
//            return sb.ToString();
//        }

//        /// <summary>
//        /// Returns the JSON string presentation of the object
//        /// </summary>
//        /// <returns>JSON string presentation of the object</returns>
//        public string ToJson()
//        {
//            return JsonConvert.SerializeObject(this, Formatting.Indented);
//        }

//        /// <summary>
//        /// Returns true if objects are equal
//        /// </summary>
//        /// <param name="obj">Object to be compared</param>
//        /// <returns>Boolean</returns>
//        public override bool Equals(object obj)
//        {
//            if (ReferenceEquals(null, obj)) return false;
//            if (ReferenceEquals(this, obj)) return true;
//            return obj.GetType() == GetType() && Equals((Support)obj);
//        }

//        /// <summary>
//        /// Returns true if Support instances are equal
//        /// </summary>
//        /// <param name="other">Instance of Support to be compared</param>
//        /// <returns>Boolean</returns>
//        public bool Equals(Support other)
//        {
//            if (ReferenceEquals(null, other)) return false;
//            if (ReferenceEquals(this, other)) return true;

//            return 
//                (
//                    Type == other.Type ||
//                    Type != null &&
//                    Type.Equals(other.Type)
//                ) && 
//                (
//                    RefId == other.RefId ||
//                    RefId != null &&
//                    RefId.Equals(other.RefId)
//                ) && 
//                (
//                    Channels == other.Channels ||
//                    Channels != null &&
//                    Channels.Equals(other.Channels)
//                );
//        }

//        /// <summary>
//        /// Gets the hash code
//        /// </summary>
//        /// <returns>Hash code</returns>
//        public override int GetHashCode()
//        {
//            unchecked // Overflow is fine, just wrap
//            {
//                var hashCode = 41;
//                // Suitable nullity checks etc, of course :)
//                    if (Type != null)
//                    hashCode = hashCode * 59 + Type.GetHashCode();
//                    if (RefId != null)
//                    hashCode = hashCode * 59 + RefId.GetHashCode();
//                    if (Channels != null)
//                    hashCode = hashCode * 59 + Channels.GetHashCode();
//                return hashCode;
//            }
//        }

//        #region Operators
//        #pragma warning disable 1591

//        public static bool operator ==(Support left, Support right)
//        {
//            return Equals(left, right);
//        }

//        public static bool operator !=(Support left, Support right)
//        {
//            return !Equals(left, right);
//        }

//        #pragma warning restore 1591
//        #endregion Operators
//    }
//}
