/*
 * Beckn Protocol Core
 *
 * Beckn Core API specification
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using bpp.Models;

namespace bpp.Models
{
    /// <summary>
    /// A collection of tag objects with group level attributes. For detailed documentation on the Tags and Tag Groups schema go to https://github.com/beckn/protocol-specifications/discussions/316
    /// </summary>
    [DataContract]
    public partial class TagGroup : IEquatable<TagGroup>
    {
        /// <summary>
        /// Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
        /// </summary>
        /// <value>Indicates the display properties of the tag group. If display is set to false, then the group will not be displayed. If it is set to true, it should be displayed. However, group-level display properties can be overriden by individual tag-level display property. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.</value>

        [DataMember(Name = "display")]
        public bool? Display { get; set; }

        /// <summary>
        /// The machine-readable name of the tag group. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value. Values outside the allowed values may or may not be ignored by the rendering platform. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.
        /// </summary>
        /// <value>The machine-readable name of the tag group. The allowed values of this property can be published at three levels namely, a) Core specification, b) industry sector-specific adaptations, and c) Network-specific adaptations. Except core, each adaptation (sector or network) should prefix a unique namespace with the allowed value. Values outside the allowed values may or may not be ignored by the rendering platform. As this schema is purely for catalog display purposes, it is not recommended to send this value during search.</value>

        [DataMember(Name = "code")]
        public string Code { get; set; }

        /// <summary>
        /// A human-readable string describing the heading under which the tags are to be displayed. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using code property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency. As this schema is purely for catalog display purposes, it is not recommended to send this value during &#x60;search&#x60;.
        /// </summary>
        /// <value>A human-readable string describing the heading under which the tags are to be displayed. Sometimes, the network policy may reserve some names for this property. Values outside the reserved values can be set by the BPP. However,the BAP may choose to rename or even ignore this value and render the output purely using code property, but it is recommended for BAPs to keep the name same to avoid confusion and provide consistency. As this schema is purely for catalog display purposes, it is not recommended to send this value during &#x60;search&#x60;.</value>

        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the &#x60;search&#x60; and achieve more relevant results. When received during &#x60;on_search&#x60;, BAPs must render this list under the heading described by the &#x60;name&#x60; property of this schema.
        /// </summary>
        /// <value>An array of Tag objects listed under this group. This property can be set by BAPs during search to narrow the &#x60;search&#x60; and achieve more relevant results. When received during &#x60;on_search&#x60;, BAPs must render this list under the heading described by the &#x60;name&#x60; property of this schema.</value>

        [DataMember(Name = "list")]
        public List<Tag> _List { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagGroup {\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _List: ").Append(_List).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TagGroup)obj);
        }

        /// <summary>
        /// Returns true if TagGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of TagGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagGroup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Display == other.Display ||
                    Display != null &&
                    Display.Equals(other.Display)
                ) &&
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    _List == other._List ||
                    _List != null &&
                    _List.SequenceEqual(other._List)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Display != null)
                    hashCode = hashCode * 59 + Display.GetHashCode();
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (_List != null)
                    hashCode = hashCode * 59 + _List.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TagGroup left, TagGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TagGroup left, TagGroup right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
