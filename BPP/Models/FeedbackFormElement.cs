/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace bpp.Models
{ 
    /// <summary>
    /// An element in the feedback form. It can be question or an answer to the question.
    /// </summary>
    [DataContract]
    public partial class FeedbackFormElement : IEquatable<FeedbackFormElement>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>

        [DataMember(Name="parent_id")]
        public string ParentId { get; set; }

        /// <summary>
        /// Specifies the question to which the answer options will be contained in the child FeedbackFormElements
        /// </summary>
        /// <value>Specifies the question to which the answer options will be contained in the child FeedbackFormElements</value>

        [DataMember(Name="question")]
        public string Question { get; set; }

        /// <summary>
        /// Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id
        /// </summary>
        /// <value>Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id</value>

        [DataMember(Name="answer")]
        public string Answer { get; set; }

        /// <summary>
        /// Specifies how the answer option should be rendered.
        /// </summary>
        /// <value>Specifies how the answer option should be rendered.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AnswerTypeEnum
        {
            /// <summary>
            /// Enum RadioEnum for radio
            /// </summary>
            [EnumMember(Value = "radio")]
            RadioEnum = 0,
            /// <summary>
            /// Enum CheckboxEnum for checkbox
            /// </summary>
            [EnumMember(Value = "checkbox")]
            CheckboxEnum = 1,
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 2        }

        /// <summary>
        /// Specifies how the answer option should be rendered.
        /// </summary>
        /// <value>Specifies how the answer option should be rendered.</value>

        [DataMember(Name="answer_type")]
        public AnswerTypeEnum? AnswerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedbackFormElement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  AnswerType: ").Append(AnswerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeedbackFormElement)obj);
        }

        /// <summary>
        /// Returns true if FeedbackFormElement instances are equal
        /// </summary>
        /// <param name="other">Instance of FeedbackFormElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedbackFormElement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    Question == other.Question ||
                    Question != null &&
                    Question.Equals(other.Question)
                ) && 
                (
                    Answer == other.Answer ||
                    Answer != null &&
                    Answer.Equals(other.Answer)
                ) && 
                (
                    AnswerType == other.AnswerType ||
                    AnswerType != null &&
                    AnswerType.Equals(other.AnswerType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (Question != null)
                    hashCode = hashCode * 59 + Question.GetHashCode();
                    if (Answer != null)
                    hashCode = hashCode * 59 + Answer.GetHashCode();
                    if (AnswerType != null)
                    hashCode = hashCode * 59 + AnswerType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeedbackFormElement left, FeedbackFormElement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeedbackFormElement left, FeedbackFormElement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
