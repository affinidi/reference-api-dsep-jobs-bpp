/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace bpp.Models
{ 
    /// <summary>
    /// Any entity which wants to authenticate itself on a network. This can be a BAP, BPP, BG, BPPR or a BGR.
    /// </summary>
    [DataContract]
    public partial class Subscriber : IEquatable<Subscriber>
    { 
        /// <summary>
        /// Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region
        /// </summary>
        /// <value>Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region</value>

        [DataMember(Name="subscriber_id")]
        public string SubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BapEnum for bap
            /// </summary>
            [EnumMember(Value = "bap")]
            BapEnum = 0,
            /// <summary>
            /// Enum BppEnum for bpp
            /// </summary>
            [EnumMember(Value = "bpp")]
            BppEnum = 1,
            /// <summary>
            /// Enum BgEnum for bg
            /// </summary>
            [EnumMember(Value = "bg")]
            BgEnum = 2,
            /// <summary>
            /// Enum BpprEnum for bppr
            /// </summary>
            [EnumMember(Value = "bppr")]
            BpprEnum = 3,
            /// <summary>
            /// Enum BgrEnum for bgr
            /// </summary>
            [EnumMember(Value = "bgr")]
            BgrEnum = 4        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Callback URL of the subscriber. The Registry will call this URL&#x27;s on_subscribe API to validate the subscriber\\&#x27;s credentials
        /// </summary>
        /// <value>Callback URL of the subscriber. The Registry will call this URL&#x27;s on_subscribe API to validate the subscriber\\&#x27;s credentials</value>

        [DataMember(Name="cb_url")]
        public string CbUrl { get; set; }

        /// <summary>
        /// Gets or Sets Domain
        /// </summary>

        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Signing Public key of the subscriber. &lt;br/&gt;&lt;br/&gt;Any subscriber platform (BAP, BPP, BG) who wants to transact on the network must digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the transport layer header. In case of &#x60;&#x60;&#x60;HTTP&#x60;&#x60;&#x60; it is the &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; header. &lt;br&gt;&lt;br/&gt;The &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; will be used to validate the signature of a BAP or BPP.&lt;br/&gt;&lt;br/&gt;Furthermore, if an API call is being proxied or multicast by a Beckn Gateway, the BG must use it\\&#x27;s signing key to digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the &#x60;&#x60;&#x60;X-Gateway-Authorization&#x60;&#x60;&#x60; header.
        /// </summary>
        /// <value>Signing Public key of the subscriber. &lt;br/&gt;&lt;br/&gt;Any subscriber platform (BAP, BPP, BG) who wants to transact on the network must digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the transport layer header. In case of &#x60;&#x60;&#x60;HTTP&#x60;&#x60;&#x60; it is the &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; header. &lt;br&gt;&lt;br/&gt;The &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; will be used to validate the signature of a BAP or BPP.&lt;br/&gt;&lt;br/&gt;Furthermore, if an API call is being proxied or multicast by a Beckn Gateway, the BG must use it\\&#x27;s signing key to digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the &#x60;&#x60;&#x60;X-Gateway-Authorization&#x60;&#x60;&#x60; header.</value>

        [DataMember(Name="signing_public_key")]
        public string SigningPublicKey { get; set; }

        /// <summary>
        /// Encryption public key of the BAP subscriber. Any BPP must encrypt the &#x60;&#x60;&#x60;requestBody.message&#x60;&#x60;&#x60; value of the &#x60;&#x60;&#x60;on_search&#x60;&#x60;&#x60; API using this public key.
        /// </summary>
        /// <value>Encryption public key of the BAP subscriber. Any BPP must encrypt the &#x60;&#x60;&#x60;requestBody.message&#x60;&#x60;&#x60; value of the &#x60;&#x60;&#x60;on_search&#x60;&#x60;&#x60; API using this public key.</value>

        [DataMember(Name="encryption_public_key")]
        public string EncryptionPublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INITIATEDEnum for INITIATED
            /// </summary>
            [EnumMember(Value = "INITIATED")]
            INITIATEDEnum = 0,
            /// <summary>
            /// Enum UNDERSUBSCRIPTIONEnum for UNDER_SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "UNDER_SUBSCRIPTION")]
            UNDERSUBSCRIPTIONEnum = 1,
            /// <summary>
            /// Enum SUBSCRIBEDEnum for SUBSCRIBED
            /// </summary>
            [EnumMember(Value = "SUBSCRIBED")]
            SUBSCRIBEDEnum = 2,
            /// <summary>
            /// Enum INVALIDSSLEnum for INVALID_SSL
            /// </summary>
            [EnumMember(Value = "INVALID_SSL")]
            INVALIDSSLEnum = 3,
            /// <summary>
            /// Enum UNSUBSCRIBEDEnum for UNSUBSCRIBED
            /// </summary>
            [EnumMember(Value = "UNSUBSCRIBED")]
            UNSUBSCRIBEDEnum = 4        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Timestamp when a subscriber was added to the registry with status &#x3D; INITIATED
        /// </summary>
        /// <value>Timestamp when a subscriber was added to the registry with status &#x3D; INITIATED</value>

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Expiry timestamp in UTC derived from the &#x60;&#x60;&#x60;lease_time&#x60;&#x60;&#x60; of the subscriber
        /// </summary>
        /// <value>Expiry timestamp in UTC derived from the &#x60;&#x60;&#x60;lease_time&#x60;&#x60;&#x60; of the subscriber</value>

        [DataMember(Name="expires")]
        public DateTime? Expires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscriber {\n");
            sb.Append("  SubscriberId: ").Append(SubscriberId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CbUrl: ").Append(CbUrl).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  SigningPublicKey: ").Append(SigningPublicKey).Append("\n");
            sb.Append("  EncryptionPublicKey: ").Append(EncryptionPublicKey).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Subscriber)obj);
        }

        /// <summary>
        /// Returns true if Subscriber instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscriber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscriber other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubscriberId == other.SubscriberId ||
                    SubscriberId != null &&
                    SubscriberId.Equals(other.SubscriberId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    CbUrl == other.CbUrl ||
                    CbUrl != null &&
                    CbUrl.Equals(other.CbUrl)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    SigningPublicKey == other.SigningPublicKey ||
                    SigningPublicKey != null &&
                    SigningPublicKey.Equals(other.SigningPublicKey)
                ) && 
                (
                    EncryptionPublicKey == other.EncryptionPublicKey ||
                    EncryptionPublicKey != null &&
                    EncryptionPublicKey.Equals(other.EncryptionPublicKey)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Expires == other.Expires ||
                    Expires != null &&
                    Expires.Equals(other.Expires)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubscriberId != null)
                    hashCode = hashCode * 59 + SubscriberId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (CbUrl != null)
                    hashCode = hashCode * 59 + CbUrl.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (SigningPublicKey != null)
                    hashCode = hashCode * 59 + SigningPublicKey.GetHashCode();
                    if (EncryptionPublicKey != null)
                    hashCode = hashCode * 59 + EncryptionPublicKey.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Expires != null)
                    hashCode = hashCode * 59 + Expires.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Subscriber left, Subscriber right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Subscriber left, Subscriber right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
