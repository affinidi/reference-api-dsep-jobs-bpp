/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace bpp.Models
{ 
    /// <summary>
    /// Describes the price of an item. Allows for domain extension.
    /// </summary>
    [DataContract]
    public partial class Price : IEquatable<Price>
    { 
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="estimated_value")]
        public string EstimatedValue { get; set; }

        /// <summary>
        /// Gets or Sets ComputedValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="computed_value")]
        public string ComputedValue { get; set; }

        /// <summary>
        /// Gets or Sets ListedValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="listed_value")]
        public string ListedValue { get; set; }

        /// <summary>
        /// Gets or Sets OfferedValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="offered_value")]
        public string OfferedValue { get; set; }

        /// <summary>
        /// Gets or Sets MinimumValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="minimum_value")]
        public string MinimumValue { get; set; }

        /// <summary>
        /// Gets or Sets MaximumValue
        /// </summary>
        [RegularExpression("[+-]?([0-9]*[.])?[0-9]+")]
        [DataMember(Name="maximum_value")]
        public string MaximumValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  EstimatedValue: ").Append(EstimatedValue).Append("\n");
            sb.Append("  ComputedValue: ").Append(ComputedValue).Append("\n");
            sb.Append("  ListedValue: ").Append(ListedValue).Append("\n");
            sb.Append("  OfferedValue: ").Append(OfferedValue).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Price)obj);
        }

        /// <summary>
        /// Returns true if Price instances are equal
        /// </summary>
        /// <param name="other">Instance of Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Price other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    EstimatedValue == other.EstimatedValue ||
                    EstimatedValue != null &&
                    EstimatedValue.Equals(other.EstimatedValue)
                ) && 
                (
                    ComputedValue == other.ComputedValue ||
                    ComputedValue != null &&
                    ComputedValue.Equals(other.ComputedValue)
                ) && 
                (
                    ListedValue == other.ListedValue ||
                    ListedValue != null &&
                    ListedValue.Equals(other.ListedValue)
                ) && 
                (
                    OfferedValue == other.OfferedValue ||
                    OfferedValue != null &&
                    OfferedValue.Equals(other.OfferedValue)
                ) && 
                (
                    MinimumValue == other.MinimumValue ||
                    MinimumValue != null &&
                    MinimumValue.Equals(other.MinimumValue)
                ) && 
                (
                    MaximumValue == other.MaximumValue ||
                    MaximumValue != null &&
                    MaximumValue.Equals(other.MaximumValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (EstimatedValue != null)
                    hashCode = hashCode * 59 + EstimatedValue.GetHashCode();
                    if (ComputedValue != null)
                    hashCode = hashCode * 59 + ComputedValue.GetHashCode();
                    if (ListedValue != null)
                    hashCode = hashCode * 59 + ListedValue.GetHashCode();
                    if (OfferedValue != null)
                    hashCode = hashCode * 59 + OfferedValue.GetHashCode();
                    if (MinimumValue != null)
                    hashCode = hashCode * 59 + MinimumValue.GetHashCode();
                    if (MaximumValue != null)
                    hashCode = hashCode * 59 + MaximumValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Price left, Price right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Price left, Price right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
