/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdateMessage : IEquatable<UpdateMessage>
    { 
        /// <summary>
        /// Comma separated values of order objects being updated. For example: &#x60;&#x60;&#x60;\&quot;update_target\&quot;:\&quot;item,billing,fulfillment\&quot;&#x60;&#x60;&#x60;
        /// </summary>
        /// <value>Comma separated values of order objects being updated. For example: &#x60;&#x60;&#x60;\&quot;update_target\&quot;:\&quot;item,billing,fulfillment\&quot;&#x60;&#x60;&#x60;</value>
        [Required]

        [DataMember(Name="update_target")]
        public string UpdateTarget { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [Required]

        [DataMember(Name="order")]
        public Order Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateMessage {\n");
            sb.Append("  UpdateTarget: ").Append(UpdateTarget).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateMessage)obj);
        }

        /// <summary>
        /// Returns true if UpdateMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateMessage other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UpdateTarget == other.UpdateTarget ||
                    UpdateTarget != null &&
                    UpdateTarget.Equals(other.UpdateTarget)
                ) && 
                (
                    Order == other.Order ||
                    Order != null &&
                    Order.Equals(other.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UpdateTarget != null)
                    hashCode = hashCode * 59 + UpdateTarget.GetHashCode();
                    if (Order != null)
                    hashCode = hashCode * 59 + Order.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateMessage left, UpdateMessage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateMessage left, UpdateMessage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
