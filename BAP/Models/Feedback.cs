///*
// *  
// *
// *  
// *
// * OpenAPI spec version: 1.0.0-dsep-draft
// * 
// * Generated by: https://github.com/swagger-api/swagger-codegen.git
// */
//using System;
//using System.Linq;
//using System.IO;
//using System.Text;
//using System.Collections;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.ComponentModel.DataAnnotations;
//using System.Runtime.Serialization;
//using Newtonsoft.Json;

//namespace BAP.Models
//{ 
//    /// <summary>
//    /// Feedback for a service
//    /// </summary>
//    [DataContract]
//    public partial class Feedback : IEquatable<Feedback>
//    { 
//        /// <summary>
//        /// Gets or Sets FeedbackForm
//        /// </summary>

//        //[DataMember(Name="feedback_form")]
//        //public FeedbackForm FeedbackForm { get; set; }

//        /// <summary>
//        /// Gets or Sets FeedbackUrl
//        /// </summary>

//        [DataMember(Name="feedback_url")]
//        public FeedbackUrl FeedbackUrl { get; set; }

//        /// <summary>
//        /// Returns the string presentation of the object
//        /// </summary>
//        /// <returns>String presentation of the object</returns>
//        public override string ToString()
//        {
//            var sb = new StringBuilder();
//            sb.Append("class Feedback {\n");
//            sb.Append("  FeedbackForm: ").Append(FeedbackForm).Append("\n");
//            sb.Append("  FeedbackUrl: ").Append(FeedbackUrl).Append("\n");
//            sb.Append("}\n");
//            return sb.ToString();
//        }

//        /// <summary>
//        /// Returns the JSON string presentation of the object
//        /// </summary>
//        /// <returns>JSON string presentation of the object</returns>
//        public string ToJson()
//        {
//            return JsonConvert.SerializeObject(this, Formatting.Indented);
//        }

//        /// <summary>
//        /// Returns true if objects are equal
//        /// </summary>
//        /// <param name="obj">Object to be compared</param>
//        /// <returns>Boolean</returns>
//        public override bool Equals(object obj)
//        {
//            if (ReferenceEquals(null, obj)) return false;
//            if (ReferenceEquals(this, obj)) return true;
//            return obj.GetType() == GetType() && Equals((Feedback)obj);
//        }

//        /// <summary>
//        /// Returns true if Feedback instances are equal
//        /// </summary>
//        /// <param name="other">Instance of Feedback to be compared</param>
//        /// <returns>Boolean</returns>
//        public bool Equals(Feedback other)
//        {
//            if (ReferenceEquals(null, other)) return false;
//            if (ReferenceEquals(this, other)) return true;

//            return 
//                (
//                    FeedbackForm == other.FeedbackForm ||
//                    FeedbackForm != null &&
//                    FeedbackForm.Equals(other.FeedbackForm)
//                ) && 
//                (
//                    FeedbackUrl == other.FeedbackUrl ||
//                    FeedbackUrl != null &&
//                    FeedbackUrl.Equals(other.FeedbackUrl)
//                );
//        }

//        /// <summary>
//        /// Gets the hash code
//        /// </summary>
//        /// <returns>Hash code</returns>
//        public override int GetHashCode()
//        {
//            unchecked // Overflow is fine, just wrap
//            {
//                var hashCode = 41;
//                // Suitable nullity checks etc, of course :)
//                    if (FeedbackForm != null)
//                    hashCode = hashCode * 59 + FeedbackForm.GetHashCode();
//                    if (FeedbackUrl != null)
//                    hashCode = hashCode * 59 + FeedbackUrl.GetHashCode();
//                return hashCode;
//            }
//        }

//        #region Operators
//        #pragma warning disable 1591

//        public static bool operator ==(Feedback left, Feedback right)
//        {
//            return Equals(left, right);
//        }

//        public static bool operator !=(Feedback left, Feedback right)
//        {
//            return !Equals(left, right);
//        }

//        #pragma warning restore 1591
//        #endregion Operators
//    }
//}
