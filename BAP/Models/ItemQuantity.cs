/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// Describes count or amount of an item
    /// </summary>
    [DataContract]
    public partial class ItemQuantity : IEquatable<ItemQuantity>
    { 
        /// <summary>
        /// Gets or Sets Allocated
        /// </summary>

        [DataMember(Name="allocated")]
        public ItemQuantityAllocated Allocated { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>

        [DataMember(Name="available")]
        public ItemQuantityAllocated Available { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>

        [DataMember(Name="maximum")]
        public ItemQuantityMaximum Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>

        [DataMember(Name="minimum")]
        public ItemQuantityAllocated Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>

        [DataMember(Name="selected")]
        public ItemQuantityAllocated Selected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemQuantity {\n");
            sb.Append("  Allocated: ").Append(Allocated).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ItemQuantity)obj);
        }

        /// <summary>
        /// Returns true if ItemQuantity instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemQuantity other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Allocated == other.Allocated ||
                    Allocated != null &&
                    Allocated.Equals(other.Allocated)
                ) && 
                (
                    Available == other.Available ||
                    Available != null &&
                    Available.Equals(other.Available)
                ) && 
                (
                    Maximum == other.Maximum ||
                    Maximum != null &&
                    Maximum.Equals(other.Maximum)
                ) && 
                (
                    Minimum == other.Minimum ||
                    Minimum != null &&
                    Minimum.Equals(other.Minimum)
                ) && 
                (
                    Selected == other.Selected ||
                    Selected != null &&
                    Selected.Equals(other.Selected)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Allocated != null)
                    hashCode = hashCode * 59 + Allocated.GetHashCode();
                    if (Available != null)
                    hashCode = hashCode * 59 + Available.GetHashCode();
                    if (Maximum != null)
                    hashCode = hashCode * 59 + Maximum.GetHashCode();
                    if (Minimum != null)
                    hashCode = hashCode * 59 + Minimum.GetHashCode();
                    if (Selected != null)
                    hashCode = hashCode * 59 + Selected.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ItemQuantity left, ItemQuantity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemQuantity left, ItemQuantity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
