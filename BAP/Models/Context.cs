/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// Describes a beckn message context
    /// </summary>
    [DataContract]
    public partial class Context : IEquatable<Context>
    {
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        /// <example>jobs</example>
        [Required]

        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        /// <example>IND</example>
        [Required]

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        /// <example>std:080</example>
        

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol
        /// </summary>
        /// <value>Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum SearchEnum for search
            /// </summary>
            [EnumMember(Value = "search")]
            SearchEnum = 0,
            /// <summary>
            /// Enum SelectEnum for select
            /// </summary>
            [EnumMember(Value = "select")]
            SelectEnum = 1,
            /// <summary>
            /// Enum InitEnum for init
            /// </summary>
            [EnumMember(Value = "init")]
            InitEnum = 2,
            /// <summary>
            /// Enum ConfirmEnum for confirm
            /// </summary>
            [EnumMember(Value = "confirm")]
            ConfirmEnum = 3,
            /// <summary>
            /// Enum UpdateEnum for update
            /// </summary>
            [EnumMember(Value = "update")]
            UpdateEnum = 4,
            /// <summary>
            /// Enum StatusEnum for status
            /// </summary>
            [EnumMember(Value = "status")]
            StatusEnum = 5,
            /// <summary>
            /// Enum TrackEnum for track
            /// </summary>
            [EnumMember(Value = "track")]
            TrackEnum = 6,
            /// <summary>
            /// Enum CancelEnum for cancel
            /// </summary>
            [EnumMember(Value = "cancel")]
            CancelEnum = 7,
            /// <summary>
            /// Enum RatingEnum for rating
            /// </summary>
            [EnumMember(Value = "rating")]
            RatingEnum = 8,
            /// <summary>
            /// Enum SupportEnum for support
            /// </summary>
            [EnumMember(Value = "support")]
            SupportEnum = 9,
            /// <summary>
            /// Enum OnSearchEnum for on_search
            /// </summary>
            [EnumMember(Value = "on_search")]
            OnSearchEnum = 10,
            /// <summary>
            /// Enum OnSelectEnum for on_select
            /// </summary>
            [EnumMember(Value = "on_select")]
            OnSelectEnum = 11,
            /// <summary>
            /// Enum OnInitEnum for on_init
            /// </summary>
            [EnumMember(Value = "on_init")]
            OnInitEnum = 12,
            /// <summary>
            /// Enum OnConfirmEnum for on_confirm
            /// </summary>
            [EnumMember(Value = "on_confirm")]
            OnConfirmEnum = 13,
            /// <summary>
            /// Enum OnUpdateEnum for on_update
            /// </summary>
            [EnumMember(Value = "on_update")]
            OnUpdateEnum = 14,
            /// <summary>
            /// Enum OnStatusEnum for on_status
            /// </summary>
            [EnumMember(Value = "on_status")]
            OnStatusEnum = 15,
            /// <summary>
            /// Enum OnTrackEnum for on_track
            /// </summary>
            [EnumMember(Value = "on_track")]
            OnTrackEnum = 16,
            /// <summary>
            /// Enum OnCancelEnum for on_cancel
            /// </summary>
            [EnumMember(Value = "on_cancel")]
            OnCancelEnum = 17,
            /// <summary>
            /// Enum OnRatingEnum for on_rating
            /// </summary>
            [EnumMember(Value = "on_rating")]
            OnRatingEnum = 18,
            /// <summary>
            /// Enum OnSupportEnum for on_support
            /// </summary>
            [EnumMember(Value = "on_support")]
            OnSupportEnum = 19        }

        /// <summary>
        /// Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol
        /// </summary>
        /// <value>Defines the Beckn API call. Any actions other than the enumerated actions are not supported by Beckn Protocol</value>
        [Required]

        [DataMember(Name="action")]
        public ActionEnum? Action { get; set; }

        /// <summary>
        /// Version of   being used
        /// </summary>
        /// <value>Version of   being used</value>
        [Required]

        [DataMember(Name="core_version")]
        public string CoreVersion { get; set; }

        /// <summary>
        /// Unique id of the BAP. By default it is the fully qualified domain name of the BAP
        /// </summary>
        /// <value>Unique id of the BAP. By default it is the fully qualified domain name of the BAP</value>
        [Required]

        [DataMember(Name="bap_id")]
        public string BapId { get; set; }

        /// <summary>
        /// URI of the BAP for accepting callbacks. Must have the same domain name as the bap_id
        /// </summary>
        /// <value>URI of the BAP for accepting callbacks. Must have the same domain name as the bap_id</value>
        [Required]

        [DataMember(Name="bap_uri")]
        public string BapUri { get; set; }

        /// <summary>
        /// Unique id of the BPP. By default it is the fully qualified domain name of the BPP
        /// </summary>
        /// <value>Unique id of the BPP. By default it is the fully qualified domain name of the BPP</value>

        [DataMember(Name="bpp_id")]
        public string BppId { get; set; }

        /// <summary>
        /// URI of the BPP. Must have the same domain name as the bap_id
        /// </summary>
        /// <value>URI of the BPP. Must have the same domain name as the bap_id</value>

        [DataMember(Name="bpp_uri")]
        public string BppUri { get; set; }

        /// <summary>
        /// This is a unique value which persists across all API calls from search through confirm
        /// </summary>
        /// <value>This is a unique value which persists across all API calls from search through confirm</value>
        [Required]

        [DataMember(Name="transaction_id")]
        public string TransactionId { get; set; }

        /// <summary>
        /// This is a unique value which persists during a request / callback cycle
        /// </summary>
        /// <value>This is a unique value which persists during a request / callback cycle</value>
        [Required]

        [DataMember(Name="message_id")]
        public string MessageId { get; set; }

        /// <summary>
        /// Time of request generation in RFC3339 format
        /// </summary>
        /// <value>Time of request generation in RFC3339 format</value>
        [Required]

        [DataMember(Name="timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// The encryption public key of the sender
        /// </summary>
        /// <value>The encryption public key of the sender</value>

        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <summary>
        /// The duration in ISO8601 format after timestamp for which this message holds valid
        /// </summary>
        /// <value>The duration in ISO8601 format after timestamp for which this message holds valid</value>

        [DataMember(Name="ttl")]
        public string Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CoreVersion: ").Append(CoreVersion).Append("\n");
            sb.Append("  BapId: ").Append(BapId).Append("\n");
            sb.Append("  BapUri: ").Append(BapUri).Append("\n");
            sb.Append("  BppId: ").Append(BppId).Append("\n");
            sb.Append("  BppUri: ").Append(BppUri).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Context)obj);
        }

        /// <summary>
        /// Returns true if Context instances are equal
        /// </summary>
        /// <param name="other">Instance of Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    CoreVersion == other.CoreVersion ||
                    CoreVersion != null &&
                    CoreVersion.Equals(other.CoreVersion)
                ) && 
                (
                    BapId == other.BapId ||
                    BapId != null &&
                    BapId.Equals(other.BapId)
                ) && 
                (
                    BapUri == other.BapUri ||
                    BapUri != null &&
                    BapUri.Equals(other.BapUri)
                ) && 
                (
                    BppId == other.BppId ||
                    BppId != null &&
                    BppId.Equals(other.BppId)
                ) && 
                (
                    BppUri == other.BppUri ||
                    BppUri != null &&
                    BppUri.Equals(other.BppUri)
                ) && 
                (
                    TransactionId == other.TransactionId ||
                    TransactionId != null &&
                    TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    MessageId == other.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(other.MessageId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Ttl == other.Ttl ||
                    Ttl != null &&
                    Ttl.Equals(other.Ttl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (CoreVersion != null)
                    hashCode = hashCode * 59 + CoreVersion.GetHashCode();
                    if (BapId != null)
                    hashCode = hashCode * 59 + BapId.GetHashCode();
                    if (BapUri != null)
                    hashCode = hashCode * 59 + BapUri.GetHashCode();
                    if (BppId != null)
                    hashCode = hashCode * 59 + BppId.GetHashCode();
                    if (BppUri != null)
                    hashCode = hashCode * 59 + BppUri.GetHashCode();
                    if (TransactionId != null)
                    hashCode = hashCode * 59 + TransactionId.GetHashCode();
                    if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Ttl != null)
                    hashCode = hashCode * 59 + Ttl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Context left, Context right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Context left, Context right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
