/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// Describes a service provider. This can be a restaurant, a hospital, a Store etc
    /// </summary>
    [DataContract]
    public partial class Provider : IEquatable<Provider>
    { 
        /// <summary>
        /// Id of the provider
        /// </summary>
        /// <value>Id of the provider</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>

        [DataMember(Name="descriptor")]
        public Descriptor Descriptor { get; set; }

        /// <summary>
        /// Category Id of the provider
        /// </summary>
        /// <value>Category Id of the provider</value>

        [DataMember(Name="category_id")]
        public string CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>

        [DataMember(Name="rating")]
        public string Rating { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>

        [DataMember(Name="time")]
        public Time Time { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>

        [DataMember(Name="categories")]
        public List<Category> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Fulfillments
        /// </summary>

        [DataMember(Name="fulfillments")]
        public List<Fulfillment> Fulfillments { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>

        [DataMember(Name="payments")]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>

        [DataMember(Name="locations")]
        public List<Location> Locations { get; set; }

        /// <summary>
        /// Gets or Sets Offers
        /// </summary>

        [DataMember(Name="offers")]
        public List<Offer> Offers { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>

        [DataMember(Name="items")]
        public List<Item> Items { get; set; }

        /// <summary>
        /// Time after which catalog has to be refreshed
        /// </summary>
        /// <value>Time after which catalog has to be refreshed</value>

        [DataMember(Name="exp")]
        public DateTime? Exp { get; set; }

        /// <summary>
        /// Gets or Sets Rateable
        /// </summary>

        [DataMember(Name="rateable")]
        public bool? Rateable { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name = "tags")]
        public List<TagGroup> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Provider {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Exp: ").Append(Exp).Append("\n");
            sb.Append("  Rateable: ").Append(Rateable).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Provider)obj);
        }

        /// <summary>
        /// Returns true if Provider instances are equal
        /// </summary>
        /// <param name="other">Instance of Provider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Provider other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Descriptor == other.Descriptor ||
                    Descriptor != null &&
                    Descriptor.Equals(other.Descriptor)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    Fulfillments == other.Fulfillments ||
                    Fulfillments != null &&
                    Fulfillments.SequenceEqual(other.Fulfillments)
                ) && 
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) && 
                (
                    Locations == other.Locations ||
                    Locations != null &&
                    Locations.SequenceEqual(other.Locations)
                ) && 
                (
                    Offers == other.Offers ||
                    Offers != null &&
                    Offers.SequenceEqual(other.Offers)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    Exp == other.Exp ||
                    Exp != null &&
                    Exp.Equals(other.Exp)
                ) && 
                (
                    Rateable == other.Rateable ||
                    Rateable != null &&
                    Rateable.Equals(other.Rateable)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.Equals(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Descriptor != null)
                    hashCode = hashCode * 59 + Descriptor.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (Fulfillments != null)
                    hashCode = hashCode * 59 + Fulfillments.GetHashCode();
                    if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                    if (Locations != null)
                    hashCode = hashCode * 59 + Locations.GetHashCode();
                    if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (Exp != null)
                    hashCode = hashCode * 59 + Exp.GetHashCode();
                    if (Rateable != null)
                    hashCode = hashCode * 59 + Rateable.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Provider left, Provider right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Provider left, Provider right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
