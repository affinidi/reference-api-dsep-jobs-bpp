/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// Describes the description of a real-world object.
    /// </summary>
    [DataContract]
    public partial class Descriptor : IEquatable<Descriptor>
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>

        [DataMember(Name = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ShortDesc
        /// </summary>

        [DataMember(Name = "short_desc")]
        public string ShortDesc { get; set; }

        /// <summary>
        /// Gets or Sets LongDesc
        /// </summary>

        [DataMember(Name = "long_desc")]
        public string LongDesc { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDesc
        /// </summary>

        [DataMember(Name = "additional_desc")]
        public DescriptorAdditionalDesc AdditionalDesc { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>

        [DataMember(Name = "media")]
        public List<MediaFile> Media { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>

        [DataMember(Name = "images")]
        public List<Image> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Descriptor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ShortDesc: ").Append(ShortDesc).Append("\n");
            sb.Append("  LongDesc: ").Append(LongDesc).Append("\n");
            sb.Append("  AdditionalDesc: ").Append(AdditionalDesc).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Descriptor)obj);
        }

        /// <summary>
        /// Returns true if Descriptor instances are equal
        /// </summary>
        /// <param name="other">Instance of Descriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Descriptor other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) &&
                (
                    ShortDesc == other.ShortDesc ||
                    ShortDesc != null &&
                    ShortDesc.Equals(other.ShortDesc)
                ) &&
                (
                    LongDesc == other.LongDesc ||
                    LongDesc != null &&
                    LongDesc.Equals(other.LongDesc)
                ) &&
                (
                    AdditionalDesc == other.AdditionalDesc ||
                    AdditionalDesc != null &&
                    AdditionalDesc.Equals(other.AdditionalDesc)
                ) &&
                (
                    Media == other.Media ||
                    Media != null &&
                    Media.SequenceEqual(other.Media)
                ) &&
                (
                    Images == other.Images ||
                    Images != null &&
                    Images.SequenceEqual(other.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                if (ShortDesc != null)
                    hashCode = hashCode * 59 + ShortDesc.GetHashCode();
                if (LongDesc != null)
                    hashCode = hashCode * 59 + LongDesc.GetHashCode();
                if (AdditionalDesc != null)
                    hashCode = hashCode * 59 + AdditionalDesc.GetHashCode();
                if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Descriptor left, Descriptor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Descriptor left, Descriptor right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
