/*
 *  
 *
 *  
 *
 * OpenAPI spec version: 1.0.0-dsep-draft
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BAP.Models
{ 
    /// <summary>
    /// Intent of a user. Used for searching for services
    /// </summary>
    [DataContract]
    public partial class Intent : IEquatable<Intent>
    {
        /// <summary>
        /// A raw description of the search intent. Free text search strings, raw audio, etc can be sent in this object.
        /// </summary>
        /// <value>A raw description of the search intent. Free text search strings, raw audio, etc can be sent in this object.</value>

        [DataMember(Name = "descriptor")]
        public Descriptor Descriptor { get; set; }

        /// <summary>
        /// The provider from which the customer wants to place to the order from
        /// </summary>
        /// <value>The provider from which the customer wants to place to the order from</value>

        [DataMember(Name = "provider")]
        public Provider Provider { get; set; }

        /// <summary>
        /// Details on how the customer wants their order fulfilled
        /// </summary>
        /// <value>Details on how the customer wants their order fulfilled</value>

        [DataMember(Name = "fulfillment")]
        public Fulfillment Fulfillment { get; set; }

        /// <summary>
        /// Details on how the customer wants to pay for the order
        /// </summary>
        /// <value>Details on how the customer wants to pay for the order</value>

        [DataMember(Name = "payment")]
        public Payment Payment { get; set; }

        /// <summary>
        /// Details on the item category
        /// </summary>
        /// <value>Details on the item category</value>

        [DataMember(Name = "category")]
        public Category Category { get; set; }

        /// <summary>
        /// details on the offer the customer wants to avail
        /// </summary>
        /// <value>details on the offer the customer wants to avail</value>

        [DataMember(Name = "offer")]
        public Offer Offer { get; set; }

        /// <summary>
        /// Details of the item that the consumer wants to order
        /// </summary>
        /// <value>Details of the item that the consumer wants to order</value>

        [DataMember(Name = "item")]
        public Item Item { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name = "tags")]
        public List<TagGroup> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Intent {\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Fulfillment: ").Append(Fulfillment).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Intent)obj);
        }

        /// <summary>
        /// Returns true if Intent instances are equal
        /// </summary>
        /// <param name="other">Instance of Intent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Intent other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Descriptor == other.Descriptor ||
                    Descriptor != null &&
                    Descriptor.Equals(other.Descriptor)
                ) &&
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.Equals(other.Provider)
                ) &&
                (
                    Fulfillment == other.Fulfillment ||
                    Fulfillment != null &&
                    Fulfillment.Equals(other.Fulfillment)
                ) &&
                (
                    Payment == other.Payment ||
                    Payment != null &&
                    Payment.Equals(other.Payment)
                ) &&
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) &&
                (
                    Offer == other.Offer ||
                    Offer != null &&
                    Offer.Equals(other.Offer)
                ) &&
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.Equals(other.Item)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Descriptor != null)
                    hashCode = hashCode * 59 + Descriptor.GetHashCode();
                if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                if (Fulfillment != null)
                    hashCode = hashCode * 59 + Fulfillment.GetHashCode();
                if (Payment != null)
                    hashCode = hashCode * 59 + Payment.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (Offer != null)
                    hashCode = hashCode * 59 + Offer.GetHashCode();
                if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Intent left, Intent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Intent left, Intent right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
